---
page_title: "End-to-end example: AWS Application"
---

# End-to-end example: AWS Application

The guide illustrates how to provision a Neon project with a dedicated database, role and compute resources as well as
AWS Secret which contains access credentials.

## Prerequisites

- terraform ~> v1.1
- Neon SaaS [API key](https://neon.tech/docs/manage/api-keys/)
- AWS account and role with sufficient privileges

## Code Snippet

The code below documents the following resources:

- the Neon stack:
    - project;
    - dedicated branch with
        - role;
        - database;
- the AWS Secretsmanager secret to store database access details securely;
- the AWS IAM policy to be attached to the AWS IAM role assumed by an application intended to communicate with the Neon
  database.

{{ tffile "examples/e2e_example.tf" }}

## Execution

1. Export API keys as environment variables:
   ```commandline
   export NEON_API_KEY=##neon api key##
   export AWS_ACCESS_KEY_ID=##AWS access key ID##
   export AWS_SECRET_ACCESS_KEY=##AWS access secret##
   ```
2. Create the file `main.tf` and copy the code [snippet](#code-snippet) there.
3. Initialize the terraform to download required providers:
   ```commandline
   terraform init
   ```
   ~> Note that the terraform state will be stored locally. Find more
   details [here](https://developer.hashicorp.com/terraform/language/settings/backends/configuration).
4. Validate the syntax correctness:
   ```commandline
   terraform validate
   ```
5. Run terraform plan:
   ```commandline
   terraform plan
   ```
   Expected output in stdout:

    ```commandline
    Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
      + create
     <= read (data resources)

    Terraform will perform the following actions:

      # data.aws_iam_policy_document.neon_access_secret will be read during apply
      # (config refers to values not yet known)
     <= data "aws_iam_policy_document" "neon_access_secret" {
          + id   = (known after apply)
          + json = (known after apply)

          + statement {
              + actions   = [
                  + "secretsmanager:ListSecrets",
                ]
              + effect    = "Allow"
              + resources = [
                  + "*",
                ]
            }
          + statement {
              + actions   = [
                  + "secretsmanager:DescribeSecret",
                  + "secretsmanager:GetResourcePolicy",
                  + "secretsmanager:GetSecretValue",
                  + "secretsmanager:ListSecretVersionIds",
                ]
              + effect    = "Allow"
              + resources = [
                  + (known after apply),
                ]
            }
        }

      # aws_iam_policy.neon_access_secret will be created
      + resource "aws_iam_policy" "neon_access_secret" {
          + arn         = (known after apply)
          + id          = (known after apply)
          + name        = "mybranch-mydb-myrole"
          + name_prefix = (known after apply)
          + path        = "/neon/read-only/"
          + policy      = (known after apply)
          + policy_id   = (known after apply)
          + tags_all    = (known after apply)
        }

      # aws_secretsmanager_secret.this will be created
      + resource "aws_secretsmanager_secret" "this" {
          + arn                            = (known after apply)
          + description                    = "Neon SaaS access details for mydb, myrole @ mybranch"
          + force_overwrite_replica_secret = false
          + id                             = (known after apply)
          + name                           = "neon/mybranch/mydb/myrole"
          + name_prefix                    = (known after apply)
          + policy                         = (known after apply)
          + recovery_window_in_days        = 0
          + rotation_enabled               = (known after apply)
          + rotation_lambda_arn            = (known after apply)
          + tags                           = {
              + "platform" = "neon"
              + "project"  = "demo"
            }
          + tags_all                       = {
              + "platform" = "neon"
              + "project"  = "demo"
            }
        }

      # aws_secretsmanager_secret_version.this will be created
      + resource "aws_secretsmanager_secret_version" "this" {
          + arn            = (known after apply)
          + id             = (known after apply)
          + secret_id      = (known after apply)
          + secret_string  = (sensitive value)
          + version_id     = (known after apply)
          + version_stages = (known after apply)
        }

      # neon_branch.this will be created
      + resource "neon_branch" "this" {
          + id               = (known after apply)
          + logical_size     = (known after apply)
          + name             = "mybranch"
          + parent_id        = (known after apply)
          + parent_lsn       = (known after apply)
          + parent_timestamp = (known after apply)
          + project_id       = (known after apply)
        }

      # neon_database.this will be created
      + resource "neon_database" "this" {
          + branch_id  = (known after apply)
          + id         = (known after apply)
          + name       = "mydb"
          + owner_name = "myrole"
          + project_id = (known after apply)
        }

      # neon_endpoint.this will be created
      + resource "neon_endpoint" "this" {
          + autoscaling_limit_max_cu = 1
          + autoscaling_limit_min_cu = 0.25
          + branch_id                = (known after apply)
          + compute_provisioner      = (known after apply)
          + disabled                 = (known after apply)
          + host                     = (known after apply)
          + id                       = (known after apply)
          + pg_settings              = (known after apply)
          + pooler_enabled           = (known after apply)
          + pooler_mode              = (known after apply)
          + project_id               = (known after apply)
          + proxy_host               = (known after apply)
          + region_id                = (known after apply)
          + suspend_timeout_seconds  = 10
          + type                     = "read_write"
        }

      # neon_project.this will be created
      + resource "neon_project" "this" {
          + compute_provisioner       = (known after apply)
          + connection_uri            = (sensitive value)
          + database_host             = (known after apply)
          + database_name             = (known after apply)
          + database_password         = (sensitive value)
          + database_user             = (known after apply)
          + default_branch_id         = (known after apply)
          + history_retention_seconds = 604800
          + id                        = (known after apply)
          + name                      = "myproject"
          + pg_version                = (known after apply)
          + region_id                 = (known after apply)
          + store_password            = true
        }

      # neon_role.this will be created
      + resource "neon_role" "this" {
          + branch_id  = (known after apply)
          + id         = (known after apply)
          + name       = "myrole"
          + password   = (sensitive value)
          + project_id = (known after apply)
          + protected  = (known after apply)
        }

    Plan: 8 to add, 0 to change, 0 to destroy.
    ```

6. Run terraform apply:
   ```commandline
   terraform apply -auto-approve
   ```
   Expected output in stdout:

    ```commandline
    Apply complete! Resources: 8 added, 0 changed, 0 destroyed.
    ```

    **Note** that the steps 5-6 may need to be repeated if a provisioned endpoint `neon_endpoint.this` is not ready to
    provision the role `neon_role.this`. In such case the following error is expected:

    ```commandline
    neon_endpoint.this: Creating...
    neon_endpoint.this: Creation complete after 0s [id=ep-xxxx-yyyy-01234567]
    ╷
    │ Error: [HTTP Code: 404][Error Code: ] no read-write endpoint for branch
    │
    │   with neon_role.this,
    │   on main.tf line 36, in resource "neon_role" "this":
    │   36: resource "neon_role" "this" {
    │
    ╵
    ```

7. Done! The database can be accessed using the connection details from the AWS secretsmanager.
8. Clean the demo infrastructure:
   ```commandline
   terraform destroy -auto-approve
   ```
   Expected output in stdout:
   ```commandline
   Destroy complete! Resources: 8 destroyed.
   ```
9. Unset environment variables:
   ```commandline
   unset NEON_API_KEY
   unset AWS_ACCESS_KEY_ID
   unset AWS_SECRET_ACCESS_KEY
   ```
